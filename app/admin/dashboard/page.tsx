'use client';

import React, { useState, useEffect } from 'react';
import { 
  Shield, Users, Building2, MessageSquare, CheckCircle, 
  XCircle, Clock, Eye, Mail, Phone, AlertCircle,
  TrendingUp, DollarSign, UserCheck, BarChart3,
  Search, Filter, RefreshCw, Settings, LogOut,
  ChevronRight, Calendar, Hash, Sparkles, Send
} from 'lucide-react';
import { createClient } from '@/lib/supabase/client';
import { toast } from 'react-hot-toast';
import { motion, AnimatePresence } from 'framer-motion';

interface Advertiser {
  id: string;
  company_name: string;
  business_registration: string;
  contact_name: string;
  contact_position: string;
  contact_phone: string | null;
  website?: string | null;
  industry?: string | null;
  marketing_budget?: string | null;
  company_size?: string | null;
  is_verified: boolean;
  verification_date?: string | null;
  created_at: string;
  updated_at?: string;
  email?: string;
  users?: {
    email: string;
  };
}

interface Stats {
  totalAdvertisers: number;
  pendingApprovals: number;
  activeInfluencers: number;
  totalCampaigns: number;
  totalRevenue: number;
  todaySignups: number;
}

export default function AdminDashboard() {
  const supabase = createClient();
  const [advertisers, setAdvertisers] = useState<Advertiser[]>([]);
  const [selectedAdvertiser, setSelectedAdvertiser] = useState<Advertiser | null>(null);
  const [stats, setStats] = useState<Stats>({
    totalAdvertisers: 0,
    pendingApprovals: 0,
    activeInfluencers: 0,
    totalCampaigns: 0,
    totalRevenue: 0,
    todaySignups: 0
  });
  const [filterStatus, setFilterStatus] = useState<'all' | 'pending' | 'verified'>('pending');
  const [searchTerm, setSearchTerm] = useState('');
  const [showChatTest, setShowChatTest] = useState(false);
  const [testMessage, setTestMessage] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, [filterStatus]);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // Í¥ëÍ≥†Ï£º Î™©Î°ù Ï°∞Ìöå - ÏùºÎ∞ò ÏøºÎ¶¨Î°ú Î≥ÄÍ≤Ω (RPC ÌÉÄÏûÖ Î¨∏Ï†ú ÌöåÌîº)
      const { data: advertisersData, error: advertisersError } = await supabase
        .from('advertisers')
        .select('*')
        .order('created_at', { ascending: false });

      if (advertisersError) {
        console.error('Í¥ëÍ≥†Ï£º Ï°∞Ìöå Ïò§Î•ò:', advertisersError);
        toast.error('Í¥ëÍ≥†Ï£º Î™©Î°ù Î°úÎìú Ïã§Ìå®');
      } else {
        // Í∞Å Í¥ëÍ≥†Ï£ºÏùò Ïù¥Î©îÏùºÏùÑ Î≥ÑÎèÑÎ°ú Ï°∞Ìöå (ÌïÑÏöîÏãú)
        const advertisersWithEmail = await Promise.all(
          (advertisersData || []).map(async (adv) => {
            // auth.users ÌÖåÏù¥Î∏îÏóêÏÑú Ïù¥Î©îÏùº Ï°∞Ìöå
            const { data: userData } = await supabase
              .from('users')
              .select('email')
              .eq('id', adv.id)
              .single();
            
            return {
              ...adv,
              users: userData ? { email: userData.email } : undefined
            };
          })
        );

        // ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
        let filteredData = advertisersWithEmail;
        if (filterStatus === 'pending') {
          filteredData = advertisersWithEmail.filter(adv => !adv.is_verified);
        } else if (filterStatus === 'verified') {
          filteredData = advertisersWithEmail.filter(adv => adv.is_verified);
        }

        setAdvertisers(filteredData as Advertiser[]);
      }

      // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      const { count: totalAds } = await supabase
        .from('advertisers')
        .select('*', { count: 'exact' });
        
      const { count: pendingAds } = await supabase
        .from('advertisers')
        .select('*', { count: 'exact' })
        .eq('is_verified', false);
        
      const { count: activeInfs } = await supabase
        .from('influencers')
        .select('*', { count: 'exact' })
        .eq('status', 'active');
        
      const { count: totalCamps } = await supabase
        .from('campaigns')
        .select('*', { count: 'exact' });

      // Ïò§Îäò Í∞ÄÏûÖÏûê Ïàò
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const { count: todaySignups } = await supabase
        .from('users')
        .select('*', { count: 'exact' })
        .gte('created_at', today.toISOString());

      setStats({
        totalAdvertisers: totalAds || 0,
        pendingApprovals: pendingAds || 0,
        activeInfluencers: activeInfs || 0,
        totalCampaigns: totalCamps || 0,
        totalRevenue: 12500000, // Mock Îç∞Ïù¥ÌÑ∞
        todaySignups: todaySignups || 0
      });

    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      toast.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
    } finally {
      setIsLoading(false);
    }
  };

  // Í¥ëÍ≥†Ï£º ÏäπÏù∏
  const approveAdvertiser = async (advertiserId: string) => {
    try {
      // Î®ºÏ†Ä Í¥ëÍ≥†Ï£ºÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
      const { data: existingAdvertiser, error: checkError } = await supabase
        .from('advertisers')
        .select('*')
        .eq('id', advertiserId)
        .single();

      if (checkError || !existingAdvertiser) {
        console.error('Í¥ëÍ≥†Ï£ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', checkError);
        toast.error('Í¥ëÍ≥†Ï£ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        return;
      }

      // ÏäπÏù∏ Ï≤òÎ¶¨
      const { data, error } = await supabase
        .from('advertisers')
        .update({ 
          is_verified: true,
          verification_date: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', advertiserId)
        .select()
        .single();

      if (error) {
        console.error('ÏäπÏù∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
        throw error;
      }

      toast.success('Í¥ëÍ≥†Ï£ºÍ∞Ä ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§! ‚úÖ');
      
      // Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setAdvertisers(prev => 
        prev.map(adv => 
          adv.id === advertiserId 
            ? { ...adv, is_verified: true, verification_date: new Date().toISOString() } 
            : adv
        )
      );

      // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      setTimeout(() => {
        loadData();
      }, 1000);
      
    } catch (error: any) {
      console.error('ÏäπÏù∏ Ïò§Î•ò:', error);
      toast.error(error.message || 'ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù');
    }
  };

  // Í¥ëÍ≥†Ï£º Í±∞Ï†à
  const rejectAdvertiser = async (advertiserId: string) => {
    if (!confirm('Ï†ïÎßê Í±∞Ï†àÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;

    try {
      // Í¥ëÍ≥†Ï£º ÏÇ≠Ï†ú ÎòêÎäî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      const { error } = await supabase
        .from('advertisers')
        .delete()
        .eq('id', advertiserId);

      if (error) throw error;

      toast.success('Í¥ëÍ≥†Ï£ºÍ∞Ä Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§.');
      
      // Î™©Î°ùÏóêÏÑú Ï†úÍ±∞
      setAdvertisers(prev => prev.filter(adv => adv.id !== advertiserId));
      
    } catch (error) {
      console.error('Í±∞Ï†à Ïò§Î•ò:', error);
      toast.error('Í±∞Ï†à Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù');
    }
  };

  // 1:1 Ï±ÑÌåÖ ÌÖåÏä§Ìä∏ ÏãúÏûë
  const startChatTest = async (advertiser: Advertiser) => {
    setSelectedAdvertiser(advertiser);
    setShowChatTest(true);
    
    // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± (Mock)
    try {
      const { data: chatRoom, error } = await supabase
        .from('chat_rooms')
        .insert({
          advertiser_id: advertiser.id,
          influencer_id: 'test-influencer-id', // ÌÖåÏä§Ìä∏Ïö© Ïù∏ÌîåÎ£®Ïñ∏ÏÑú
          campaign_id: 'test-campaign-id', // ÌÖåÏä§Ìä∏Ïö© Ï∫†ÌéòÏù∏
          status: 'active'
        })
        .select()
        .single();

      if (error) {
        console.log('Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïò§Î•ò (Ï†ïÏÉÅÏ†ÅÏùº Ïàò ÏûàÏùå):', error);
      } else {
        console.log('Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÏÑ±Í≥µ:', chatRoom);
        toast.success('ÌÖåÏä§Ìä∏ Ï±ÑÌåÖÎ∞©Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
      }
    } catch (error) {
      console.error('Ï±ÑÌåÖ ÌÖåÏä§Ìä∏ Ïò§Î•ò:', error);
    }
  };

  // ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const sendTestMessage = async () => {
    if (!testMessage.trim() || !selectedAdvertiser) return;

    try {
      const { data, error } = await supabase
        .from('messages')
        .insert({
          chat_room_id: 'test-room-id',
          sender_id: selectedAdvertiser.id,
          sender_type: 'advertiser',
          content: testMessage,
          message_type: 'text'
        });

      if (error) {
        console.log('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò (ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏùÑ Ïàò ÏûàÏùå):', error);
        toast.error('Î©îÏãúÏßÄ ÌÖåÏù¥Î∏îÏù¥ ÏïÑÏßÅ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. DB ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî.');
      } else {
        toast.success('ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÑ±Í≥µ! üí¨');
        setTestMessage('');
      }
    } catch (error) {
      console.error('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò:', error);
    }
  };

  // ÌïÑÌÑ∞ÎßÅÎêú Í¥ëÍ≥†Ï£º Î™©Î°ù
  const filteredAdvertisers = advertisers.filter(adv => {
    if (searchTerm) {
      return adv.company_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
             adv.contact_name.toLowerCase().includes(searchTerm.toLowerCase());
    }
    return true;
  });

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Ìó§Îçî */}
      <div className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center gap-3">
              <Shield className="w-8 h-8 text-purple-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú</h1>
                <p className="text-sm text-gray-500">ITDA Admin Panel</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <button
                onClick={loadData}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <RefreshCw className="w-5 h-5 text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                <Settings className="w-5 h-5 text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors text-red-600">
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-8">
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">Ï¥ù Í¥ëÍ≥†Ï£º</p>
                <p className="text-2xl font-bold">{stats.totalAdvertisers}</p>
              </div>
              <Building2 className="w-8 h-8 text-purple-600 opacity-20" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">ÏäπÏù∏ ÎåÄÍ∏∞</p>
                <p className="text-2xl font-bold text-orange-600">{stats.pendingApprovals}</p>
              </div>
              <Clock className="w-8 h-8 text-orange-600 opacity-20" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">ÌôúÏÑ± Ïù∏ÌîåÎ£®Ïñ∏ÏÑú</p>
                <p className="text-2xl font-bold">{stats.activeInfluencers}</p>
              </div>
              <Users className="w-8 h-8 text-green-600 opacity-20" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">ÏßÑÌñâÏ§ë Ï∫†ÌéòÏù∏</p>
                <p className="text-2xl font-bold">{stats.totalCampaigns}</p>
              </div>
              <BarChart3 className="w-8 h-8 text-blue-600 opacity-20" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">Ïõî ÏàòÏùµ</p>
                <p className="text-xl font-bold">‚Ç©{(stats.totalRevenue / 1000000).toFixed(1)}M</p>
              </div>
              <DollarSign className="w-8 h-8 text-emerald-600 opacity-20" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs text-gray-500">Ïò§Îäò Í∞ÄÏûÖ</p>
                <p className="text-2xl font-bold">{stats.todaySignups}</p>
              </div>
              <UserCheck className="w-8 h-8 text-pink-600 opacity-20" />
            </div>
          </div>
        </div>

        {/* Í¥ëÍ≥†Ï£º Í¥ÄÎ¶¨ ÏÑπÏÖò */}
        <div className="bg-white rounded-lg shadow-sm">
          <div className="p-6 border-b">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <h2 className="text-lg font-semibold">Í¥ëÍ≥†Ï£º Í¥ÄÎ¶¨</h2>
              
              <div className="flex flex-wrap items-center gap-3">
                {/* Í≤ÄÏÉâ */}
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="ÌöåÏÇ¨Î™Ö ÎòêÎäî Îã¥ÎãπÏûê Í≤ÄÏÉâ..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-9 pr-3 py-2 border rounded-lg text-sm w-64"
                  />
                </div>
                
                {/* ÌïÑÌÑ∞ */}
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setFilterStatus('all')}
                    className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${
                      filterStatus === 'all' 
                        ? 'bg-purple-100 text-purple-700' 
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    Ï†ÑÏ≤¥
                  </button>
                  <button
                    onClick={() => setFilterStatus('pending')}
                    className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${
                      filterStatus === 'pending' 
                        ? 'bg-orange-100 text-orange-700' 
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    ÏäπÏù∏ ÎåÄÍ∏∞
                  </button>
                  <button
                    onClick={() => setFilterStatus('verified')}
                    className={`px-3 py-1.5 text-sm rounded-lg transition-colors ${
                      filterStatus === 'verified' 
                        ? 'bg-green-100 text-green-700' 
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    ÏäπÏù∏Îê®
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Í¥ëÍ≥†Ï£º Î™©Î°ù */}
          <div className="overflow-x-auto">
            {isLoading ? (
              <div className="p-12 text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
                <p className="mt-4 text-gray-500">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
              </div>
            ) : filteredAdvertisers.length === 0 ? (
              <div className="p-12 text-center">
                <Building2 className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">
                  {searchTerm ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.' : 'Í¥ëÍ≥†Ï£ºÍ∞Ä ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>
            ) : (
              <table className="w-full">
                <thead className="bg-gray-50 border-b">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      ÌöåÏÇ¨ Ï†ïÎ≥¥
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Îã¥ÎãπÏûê
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ïó∞ÎùΩÏ≤ò
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Í∞ÄÏûÖÏùº
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      ÏÉÅÌÉú
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ïï°ÏÖò
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredAdvertisers.map((advertiser) => (
                    <motion.tr
                      key={advertiser.id}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="hover:bg-gray-50 transition-colors"
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {advertiser.company_name}
                          </div>
                          <div className="text-xs text-gray-500">
                            ÏÇ¨ÏóÖÏûê: {advertiser.business_registration}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm text-gray-900">
                            {advertiser.contact_name}
                          </div>
                          <div className="text-xs text-gray-500">
                            {advertiser.contact_position}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm text-gray-900 flex items-center gap-1">
                            <Mail className="w-3 h-3" />
                            {advertiser.users?.email || advertiser.contact_name + '@ÎØ∏ÌôïÏù∏'}
                          </div>
                          <div className="text-xs text-gray-500 flex items-center gap-1">
                            <Phone className="w-3 h-3" />
                            {advertiser.contact_phone || 'Ïó∞ÎùΩÏ≤ò ÏóÜÏùå'}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(advertiser.created_at).toLocaleDateString('ko-KR')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {advertiser.is_verified ? (
                          <span className="px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full flex items-center gap-1 w-fit">
                            <CheckCircle className="w-3 h-3" />
                            ÏäπÏù∏Îê®
                          </span>
                        ) : (
                          <span className="px-2 py-1 text-xs bg-orange-100 text-orange-700 rounded-full flex items-center gap-1 w-fit">
                            <Clock className="w-3 h-3" />
                            ÎåÄÍ∏∞Ï§ë
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center gap-2">
                          {!advertiser.is_verified && (
                            <>
                              <button
                                onClick={() => approveAdvertiser(advertiser.id)}
                                className="p-1.5 bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                                title="ÏäπÏù∏"
                              >
                                <CheckCircle className="w-4 h-4" />
                              </button>
                              <button
                                onClick={() => rejectAdvertiser(advertiser.id)}
                                className="p-1.5 bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"
                                title="Í±∞Ï†à"
                              >
                                <XCircle className="w-4 h-4" />
                              </button>
                            </>
                          )}
                          <button
                            onClick={() => startChatTest(advertiser)}
                            className="p-1.5 bg-purple-100 text-purple-700 rounded hover:bg-purple-200 transition-colors"
                            title="Ï±ÑÌåÖ ÌÖåÏä§Ìä∏"
                          >
                            <MessageSquare className="w-4 h-4" />
                          </button>
                          <button
                            className="p-1.5 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                            title="ÏÉÅÏÑ∏Î≥¥Í∏∞"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>

      {/* Ï±ÑÌåÖ ÌÖåÏä§Ìä∏ Î™®Îã¨ */}
      <AnimatePresence>
        {showChatTest && selectedAdvertiser && (
          <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-lg w-full max-w-2xl h-[600px] flex flex-col"
            >
              <div className="p-4 border-b flex items-center justify-between">
                <div>
                  <h3 className="font-semibold">1:1 Ï±ÑÌåÖ ÌÖåÏä§Ìä∏</h3>
                  <p className="text-sm text-gray-500">
                    {selectedAdvertiser.company_name} - {selectedAdvertiser.contact_name}
                  </p>
                </div>
                <button 
                  onClick={() => setShowChatTest(false)}
                  className="p-2 hover:bg-gray-100 rounded"
                >
                  <XCircle className="w-5 h-5" />
                </button>
              </div>
              
              <div className="flex-1 p-4 overflow-y-auto bg-gray-50">
                <div className="text-center text-sm text-gray-500 mb-4">
                  Ï±ÑÌåÖ ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§
                </div>
                
                {/* ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄ */}
                <div className="space-y-3">
                  <div className="flex justify-start">
                    <div className="bg-white rounded-lg p-3 max-w-xs">
                      <p className="text-sm font-semibold text-purple-600">Ïù∏ÌîåÎ£®Ïñ∏ÏÑú</p>
                      <p className="text-sm">ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï∫†ÌéòÏù∏Ïóê Í¥ÄÏã¨Ïù¥ ÏûàÏñ¥ÏÑú ÏßÄÏõêÌñàÏäµÎãàÎã§.</p>
                    </div>
                  </div>
                  
                  <div className="flex justify-end">
                    <div className="bg-purple-600 text-white rounded-lg p-3 max-w-xs">
                      <p className="text-sm font-semibold">Í¥ëÍ≥†Ï£º</p>
                      <p className="text-sm">ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌîÑÎ°úÌïÑ ÌôïÏù∏ÌñàÏäµÎãàÎã§. ÌòëÏóÖ ÏßÑÌñâÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.</p>
                    </div>
                  </div>
                </div>

                {/* ÏãúÏä§ÌÖú Î©îÏãúÏßÄ */}
                <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="w-5 h-5 text-yellow-600 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-semibold text-yellow-800 mb-1">ÌÖåÏä§Ìä∏ Î™®Îìú</p>
                      <p className="text-yellow-700">
                        Ïã§Ï†ú Ï±ÑÌåÖ Í∏∞Îä•ÏùÑ ÌÖåÏä§Ìä∏ÌïòÎ†§Î©¥ DBÏóê messages ÌÖåÏù¥Î∏îÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.
                        ÏïÑÎûò Î©îÏãúÏßÄ Ï†ÑÏÜ°ÏùÑ ÌÜµÌï¥ Ïó∞ÎèôÏùÑ ÌÖåÏä§Ìä∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="p-4 border-t">
                <div className="flex items-center gap-2">
                  <input 
                    type="text"
                    value={testMessage}
                    onChange={(e) => setTestMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendTestMessage()}
                    placeholder="ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                    className="flex-1 px-3 py-2 border rounded-lg"
                  />
                  <button 
                    onClick={sendTestMessage}
                    className="p-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïãú DB Ïó∞ÎèôÏùÑ ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§
                </p>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </div>
  );
}